// Servi√ßo de Economia do RPG
const state = require('./state');
const { ITEMS } = require('./constants');

function depositar(userId, valor) {
    const player = state.getPlayer(userId);
    
    if (isNaN(valor) || valor <= 0) {
        return {
            success: false,
            message: '‚ùå Valor inv√°lido! Digite um n√∫mero positivo.'
        };
    }
    
    if (player.gold < valor) {
        return {
            success: false,
            message: `‚ùå Gold insuficiente!\n\nüí∞ Seu gold: ${player.gold}\nüí∏ Tentou depositar: ${valor}`
        };
    }
    
    player.gold -= valor;
    player.banco += valor;
    state.saveData();
    
    return {
        success: true,
        message: `üè¶ *DEP√ìSITO REALIZADO!*\n\nüí∞ Depositado: ${valor} gold\nüè¶ Saldo banco: ${player.banco} gold\nüí∏ Gold restante: ${player.gold} gold`
    };
}

function sacar(userId, valor) {
    const player = state.getPlayer(userId);
    
    if (isNaN(valor) || valor <= 0) {
        return {
            success: false,
            message: '‚ùå Valor inv√°lido! Digite um n√∫mero positivo.'
        };
    }
    
    if (player.banco < valor) {
        return {
            success: false,
            message: `‚ùå Saldo insuficiente no banco!\n\nüè¶ Saldo banco: ${player.banco}\nüí∏ Tentou sacar: ${valor}`
        };
    }
    
    player.banco -= valor;
    player.gold += valor;
    state.saveData();
    
    return {
        success: true,
        message: `üè¶ *SAQUE REALIZADO!*\n\nüí∞ Sacado: ${valor} gold\nüí∏ Gold atual: ${player.gold} gold\nüè¶ Saldo banco: ${player.banco} gold`
    };
}

function calcularRendaPassiva(player) {
    let renda = 0;
    for (const [itemId, qtd] of Object.entries(player.inventario)) {
        const item = ITEMS[itemId];
        if (item && item.renda) {
            renda += item.renda * qtd;
        }
    }
    return renda;
}

function coletarDaily(userId) {
    const player = state.getPlayer(userId);
    const now = Date.now();
    const cooldown = 86400000; // 24 horas
    
    const lastDaily = player.cooldowns.daily || 0;
    
    if (now - lastDaily < cooldown) {
        const restante = Math.ceil((cooldown - (now - lastDaily)) / 1000 / 60 / 60);
        return {
            success: false,
            message: `‚è∞ Voc√™ j√° coletou hoje!\n\nüïê Aguarde ${restante}h para coletar novamente.`
        };
    }
    
    // Calcula daily
    const baseDaily = 100;
    const nivelBonus = player.nivel * 10;
    const rendaPassiva = calcularRendaPassiva(player);
    const totalDaily = baseDaily + nivelBonus + rendaPassiva;
    
    state.addGold(player, totalDaily);
    player.cooldowns.daily = now;
    state.saveData();
    
    return {
        success: true,
        message: `üí∞ *DAILY COLETADO!*\n\n‚úÖ +${totalDaily} gold\n\nüìä Breakdown:\n‚Ä¢ Base: ${baseDaily}\n‚Ä¢ N√≠vel ${player.nivel}: +${nivelBonus}\n‚Ä¢ Renda passiva: +${rendaPassiva}\n\nüí∏ Gold total: ${player.gold} gold\n\nüïê Pr√≥ximo daily: 24h`
    };
}

function transferir(fromUserId, toUserId, valor) {
    const fromPlayer = state.getPlayer(fromUserId);
    const toPlayer = state.getPlayer(toUserId);
    
    if (isNaN(valor) || valor <= 0) {
        return {
            success: false,
            message: '‚ùå Valor inv√°lido!'
        };
    }
    
    if (fromPlayer.gold < valor) {
        return {
            success: false,
            message: `‚ùå Gold insuficiente!\n\nüí∞ Seu gold: ${fromPlayer.gold}`
        };
    }
    
    fromPlayer.gold -= valor;
    toPlayer.gold += valor;
    state.saveData();
    
    return {
        success: true,
        message: `üí∏ *TRANSFER√äNCIA REALIZADA!*\n\nüí∞ Enviado: ${valor} gold\nüí∏ Seu gold restante: ${fromPlayer.gold} gold`,
        data: { valor, fromGold: fromPlayer.gold, toGold: toPlayer.gold }
    };
}

module.exports = {
    depositar,
    sacar,
    calcularRendaPassiva,
    coletarDaily,
    transferir
};
